
===================================
Unreal Engine 5 Editor Extensions
===================================

======================================================
---------------------------------------
MODULES:
* Modules are basically building blocks for the ending
* Ensure good code separateion
* All moudles require a [ModuleName].Build.cs
  * In fact, every C++ project has one, e.g. EditorExtend.Build.cs
* Outside modules can be included by adding them to the Build.cs file

Modules:
https://dev.epicgames.com/documentation/en-us/unreal-engine/modules?application_version=4.27

Loading Phases:
https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Projects/ELoadingPhase__Type?application_version=5.0

------------------
PLUGINS:
For this project, since all the functionality will be related to the Editor, a Plugin is perfect for this.

Creating a Plugin
* Edit -> Plugins -> click +Add
* There are multiple templates to choose from:
  * Blank, Content Only, Blueprint Library, Editor Mode, Editor Standalone Window, Editor Toolbar Button, Third Party Library

* For this project, we select Blank. This course will do everything from scratch so by the end, we will understand what all the templates do.
* The "Blank" project will appear in the Editor's Plugin list, but will NOT register any buttons or menu entries. We will do these manually.

NOTE:
* By creating a Plugin, you are ALSO creating a Module
* The Plugin name will be the Module name
  * So this is not something you can change later (?)
  * So choose your name carefully!

* Click Create Plugin after filling the Plugin Name field.

After the Plugin is created, you need to open the .uplugin file and change the following:
* In the Modules
* Type = "Runtime"  => If the plugin, will have impact on the game code, you want this to be "Runtime"
* "Type" = "Editor" => If it's only for the Editor
* "LoadingPhase" = "PreDefault" => Decides when the Module will be loaded, so now this Module will be loaded before the Game module. (Note we didnt say Plugin here)

======================================================
QUICK ASSET ACTIONS

Some types of Actions (Built-in Classes):
* Actions to assets:        AssetActionUtility
* Actions to actors:        ActorActionUtility

Mark functions with CallInEditor to use these:
UFUNCTION(CallInEditor):  A button will be added to the menu options when we right click

Possible bug in Scripted Asset Action:
* Note: This is intended behavior in UE5.4
* https://www.udemy.com/course/unrealengine5-c-one-course-solution-for-extending-editor/learn/lecture/38588548

Tools -> New C++ Class -> All Classes -> AssetActionUtility
* IMPORTANT: Make sure the class is inside our Editor Module

Need to add Blutility as a Dependency in our module's Build.cs file
NOTE: Adding as a Public dependency causes build errors
QuickAssetAction.h(6): fatal error C1083: Cannot open include file: 'AssetActionUtility.h': No such file or directory
1>[2/8] Compile [x64] Module.SuperManager.cpp

NOTE:
* Be careful which Build.cs file you edit!  I was editing the wrong one (was editing ExtendEditor.Build.cs, which is the project, and NOT the plugin, which is SuperManager.Build.cs)
* I did NOT need to include the extra paths, as they are not there in UE5.4 (the PrivateIncludePaths in Blutility.Build.cs)

------------------------------------------
BUG / ISSUE / Intended Behavior(?)

* After adding the QuickAssetActions, it did NOT show ScriptedAssetActions for TestFunc.
* I remember this from before, you need to make a blueprint (or do this in the C++) for included assets, I believe.

* You MUST make a Blueprint asset:
  * In your PLUGIN Content folder, right-click -> Editor Utilities -> Editor Utility Blueprint
  * In AllClasses -> Type/Find your class (e.g. QuickAssetAction)
  * EUBP_QuickAssetAction

* Now, the right-click -> Scripted Asset Actions menu should appear

------------------------------------------
DEBUG MESSAGES:

Note:
* In the Editor, the AddOnScreenDebugMessage() was NOT displaying until I enabled FPS:
* Open console (~), then type stat FPS
* This is also in the Upper-Left hamburger menu:
  * Show FPS
  * Show Stats
* These enable "real-time"

------------------------------------------
=========================================================
Scripting Libraries

Two Editor Scripting Libraries:
* UEditorUtilityLibrary
* UEditorAssetLibrary

Some of the most important static functions in these:

UEditorUtilityLibrary
* GetSelectedAssets()
* GetSelectedAssetData()

UEditorAssetLibrary
* ListAssets()

------------------------------------------------
DUPLICATING:

* UEditorUtilityLibrary::GetSelectedAssetData()
* UEditorAssetLibrary::DuplicateAsset

------------------------------------------------

FAssetData: Gives more info about selected assets


EditorAssetLibrary.h:
* Requires EditorScriptingUtilities in Build.cs


EXEC : warning : Plugin 'SuperManager' does not list plugin 'EditorScriptingUtilities' as a dependency, but module 'SuperManager' depends on module 'EditorScriptingUtilities'.

From ChatGPT:
This warning in Unreal Engine 5 (UE5) indicates that your SuperManager plugin is dependent on the EditorScriptingUtilities module, but the plugin's configuration file (.uplugin) does not explicitly declare this dependency. To resolve the warning, you need to specify the dependency in the plugin's .uplugin file.

Needed to add this to the uplugin, under "Modules", "DependencyModuleNames":

"EditorScriptingUtilities"

"DependencyModuleNames": [ "EditorScriptingUtilities" ]


  "Modules": [
    {
      "Name": "SuperManager",
      "Type": "Editor",
      "LoadingPhase": "PreDefault",
      "DependencyModuleNames": [ "EditorScriptingUtilities" ]
    }
  ]

  Had to shut down VS, generate VS project files, then open VS again and the warning was fixed

--------------------------------------------------
ASSET BATCH DUPLICATION

static UObject* DuplicateAsset(SourceAssetPath, DestinationAssetPath);

Object Path:   the object path + name.name
Package Path:  the folder path

FAssetData has what we need


NOTE:
* If your ScriptedAssetActions do NOT appear, then you will probably need to open the Blueprint and save the Blueprint class again (that derives from your C++ AssetActionUtility)

-------------------------------
If a CallInEditor UFUNCTION has an int parameter, then a dialog will appear to enter the value:
void DuplicateAssets(int32 NumOfDuplicates);

Also a popup to enter a string will appear as well:
void TestCallInEditorString(FString TestString);

--------------------------------------------------

========================================================
CUSTOM EDITOR MESSAGES

FMessageDialog
FNotificationManager

https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Misc/FMessageDialog?application_version=4.27

https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Slate/Widgets/Notifications/SNotificationList?application_version=4.27

--------------------------
FMessageDialog Example:
    FText MsgTtile = FText::FromString(TEXT("Warning"));
    FMessageDialog::Open(EAppMsgType::Ok, FText::FromString(TEXT("Please enter a VALID number")), &MsgTtile);

--------------------------
For success, instead of using a debug message, you can use a "notification" in the lower right corner

#include "Widgets/Notifications/SNotificationList.h"
#include "Framework/Notifications/NotificationManager.h"

Example usage:

void ShowNotifyInfo(const FString& Message)
{
  FNotificationInfo NotifyInfo(FText::FromString(Message));
  NotifyInfo.bUseLargeFont = true;
  NotifyInfo.FadeOutDuration = 4.0f;

  FSlateNotificationManager::Get().AddNotification(NotifyInfo);
}


========================================================
ASSET NAMING CONVENTIONS / ASSET PREFIXES

Epic's Official Asset Naming Conventions:
https://dev.epicgames.com/documentation/en-us/unreal-engine/recommended-asset-naming-conventions-in-unreal-engine-projects?application_version=5.4

Functions we will use:
UEditorUtilityLibrary::RenameAsset()

TArray<FString> PrefixArray 
* Too slow for our purposes (O(n))

TMap<UClass, FString> PrefixMap
* This is what we will use --- fast lookup
* PrefixMap.Find(SelectedObject->GetClass())
* A TMap is a list of TPair<> objects!

----
Special case for Materials / Material Instance / Material Instance Constant

NOTE: MaterialInstance is actually an abstract class.
A Material Instance is really UMaterialInstanceConstant

          // Handle special case for MaterialInstance assets
          if (SelectedAsset->IsA<UMaterialInstanceConstant>())
          {
            if (OldName.StartsWith("M_"))
            {
              OldName.RemoveFromStart("M_");
            }

            if (OldName.EndsWith("_Inst"))
            {
              OldName.RemoveFromEnd("_Inst");
            }
          }


--------------------------------------------
Warnings:

  C:\Dev\Udemy\VincePetrelli\ExtendEditor\Plugins\SuperManager\Source\SuperManager\Public\DebugHeader.h(26): warning C4996: 'FMessageDialog::Open': Use the overload of Open that takes the Title by-value. Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.

  C:\Dev\Udemy\VincePetrelli\ExtendEditor\Plugins\SuperManager\Source\SuperManager\Private\AssetActions\QuickAssetAction.cpp(37): warning C4996: 'FAssetData::ObjectPath': FName asset paths have been deprecated. Use GetSoftObjectPath to get the path this asset will use in memory when loaded or GetObjectPathString() if you were just doing ObjectPath.ToString() Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.


========================================================
