
===================================
Unreal Engine 5 Editor Extensions
===================================

======================================================
---------------------------------------
MODULES:
* Modules are basically building blocks for the ending
* Ensure good code separateion
* All moudles require a [ModuleName].Build.cs
  * In fact, every C++ project has one, e.g. EditorExtend.Build.cs
* Outside modules can be included by adding them to the Build.cs file

Modules:
https://dev.epicgames.com/documentation/en-us/unreal-engine/modules?application_version=4.27

Loading Phases:
https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Projects/ELoadingPhase__Type?application_version=5.0

------------------
PLUGINS:
For this project, since all the functionality will be related to the Editor, a Plugin is perfect for this.

Creating a Plugin
* Edit -> Plugins -> click +Add
* There are multiple templates to choose from:
  * Blank, Content Only, Blueprint Library, Editor Mode, Editor Standalone Window, Editor Toolbar Button, Third Party Library

* For this project, we select Blank. This course will do everything from scratch so by the end, we will understand what all the templates do.
* The "Blank" project will appear in the Editor's Plugin list, but will NOT register any buttons or menu entries. We will do these manually.

NOTE:
* By creating a Plugin, you are ALSO creating a Module
* The Plugin name will be the Module name
  * So this is not something you can change later (?)
  * So choose your name carefully!

* Click Create Plugin after filling the Plugin Name field.

After the Plugin is created, you need to open the .uplugin file and change the following:
* In the Modules
* Type = "Runtime"  => If the plugin, will have impact on the game code, you want this to be "Runtime"
* "Type" = "Editor" => If it's only for the Editor
* "LoadingPhase" = "PreDefault" => Decides when the Module will be loaded, so now this Module will be loaded before the Game module. (Note we didnt say Plugin here)

======================================================
QUICK ASSET ACTIONS

Some types of Actions (Built-in Classes):
* Actions to assets:        AssetActionUtility
* Actions to actors:        ActorActionUtility

Mark functions with CallInEditor to use these:
UFUNCTION(CallInEditor):  A button will be added to the menu options when we right click

Possible bug in Scripted Asset Action:
* Note: This is intended behavior in UE5.4
* https://www.udemy.com/course/unrealengine5-c-one-course-solution-for-extending-editor/learn/lecture/38588548

Tools -> New C++ Class -> All Classes -> AssetActionUtility
* IMPORTANT: Make sure the class is inside our Editor Module

Need to add Blutility as a Dependency in our module's Build.cs file
NOTE: Adding as a Public dependency causes build errors
QuickAssetAction.h(6): fatal error C1083: Cannot open include file: 'AssetActionUtility.h': No such file or directory
1>[2/8] Compile [x64] Module.SuperManager.cpp

NOTE:
* Be careful which Build.cs file you edit!  I was editing the wrong one (was editing ExtendEditor.Build.cs, which is the project, and NOT the plugin, which is SuperManager.Build.cs)
* I did NOT need to include the extra paths, as they are not there in UE5.4 (the PrivateIncludePaths in Blutility.Build.cs)

------------------------------------------
BUG / ISSUE / Intended Behavior(?)

* After adding the QuickAssetActions, it did NOT show ScriptedAssetActions for TestFunc.
* I remember this from before, you need to make a blueprint (or do this in the C++) for included assets, I believe.

* You MUST make a Blueprint asset:
  * In your PLUGIN Content folder, right-click -> Editor Utilities -> Editor Utility Blueprint
  * In AllClasses -> Type/Find your class (e.g. QuickAssetAction)
  * EUBP_QuickAssetAction

* Now, the right-click -> Scripted Asset Actions menu should appear

------------------------------------------
